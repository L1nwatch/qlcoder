#!/bin/env python3
# -*- coding: utf-8 -*-
# version: Python3.X
"""
2017.02.22 题 19
    1. 按规律生成矩阵
    2. 合并整数
    3. 矩阵找数
"""
__author__ = '__L1n__w@tch'


class Solve:
    @staticmethod
    def create_matrix(m):
        """
        给定 m 的值, 在 m 行 m 列的矩阵中存放如下规律的数
        当 m = 2 时:
            1 2
            2 4
        当 m = 4 时:
            1 2 3 4
            2 4 6 8
            3 6 9 12
            4 8 12 16
        参考思路:
            (1) 先实现能够创建一个 m 行 m 列的矩阵, 每个元素都为 1
            (2) 更改上一步的实现, 插入的元素不是 1, 而是规律要求的数字
            (3) 观察规律: 第 1 列的数是从 1 .. m, 第 2 列是第 1 列的数乘以 2, 第 3 列是第 1 列的数乘以 3 ...
        :param m:
        :return:
        """
        pass

    @staticmethod
    def unite_int(a, b):
        """
        将 a/b 中的两个正整数合并形成一个新的整数放在 c 中.
        合并的方式是:
            将 a 中的十位和个位依次放在变量 c 的十位和千位上
            b 中的十位和个位依次放在变量 c 的个位和百位上
        参考思路:
            (1) 将 a 和 b 变成字符串操作
            (2) 结果按照字符串的形式拼出来后, 再调用 int() 进行类型转换回整数
        :param a: int(), 10 <= a <= 99, 比如 45
        :param b: int(), 10 <= b <= 99, 比如 12
        :return: int(), 比如 5241
        """
        pass

    @staticmethod
    def find_num_in_matrix(matrix):
        """
        给定一个 3*4 的矩阵, 找出在行上最大/在列上最小的那个元素, 若没有符合条件的元素则返回 None
        比如:
            1 2 13 4
            7 8 10 6
            3 5 9 7
        其中 9 为第 3 行中最大的那个元素, 又是第 3 列中最小的那个元素, 于是返回 9
        参考思路:
            (1) 遍历每一行, 找出每行中的最大数, 存在一个列表中 ( 参考: max(list) 可以直接得到列表中最大的元素 )
            (2) 遍历每一列, 找出每一列中的最小数, 存在一个列表中 ( 参考: min(list) 可以直接得到列表中最小的元素 )
            (3) 按索引值遍历每个元素, 判断这个元素是不是当前行最大的那个(取出 1 步中对应的值进行比较)
                如果是当前行最大的那个, 再判断是不是当前列最小的那个(取出 2 步中对应的值进行比较)
        :param matrix: list(), 此处固定为 3 * 4 的矩阵, 比如 [[1, 2, 13, 4], [7, 8, 10, 6], [3, 5, 9, 7]]
        :return: int() or None, 找到了就返回对应的数值, 找不到则返回 None, 比如 9
        """
        pass


if __name__ == "__main__":
    pass
